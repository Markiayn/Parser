package org.example.service;

import org.example.config.AppConfig;
import org.example.database.DatabaseManager;
import org.example.model.Apartment;

import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.List;
import java.util.ArrayList;
import java.util.Optional;

public class PostingService {
    private final DatabaseManager databaseManager;
    private final TelegramService telegramService;
    private final boolean verbose;
    
    public PostingService() {
        this.databaseManager = DatabaseManager.getInstance();
        this.telegramService = new TelegramService();
        this.verbose = AppConfig.isVerbose();
    }
    
    /**
     * –†–æ–∑—É–º–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥—É: –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ä—ñ–∑–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤ —Ä—ñ–∑–Ω—ñ –∫–∞–Ω–∞–ª–∏
     */
    public boolean postSmart(List<Apartment> apartments) {
        if (apartments == null || apartments.isEmpty()) {
            if (verbose) {
                System.out.println("‚ö†Ô∏è –ù–µ–º–∞—î –∫–≤–∞—Ä—Ç–∏—Ä –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥—É");
            }
            return false;
        }
        
        // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∫–≤–∞—Ä—Ç–∏—Ä–∏ –∑ —Ñ–æ—Ç–æ
        List<Apartment> apartmentsWithPhotos = apartments.stream()
                .filter(apt -> apt.getPhotoPaths() != null && !apt.getPhotoPaths().isEmpty())
                .toList();
        
        if (apartmentsWithPhotos.isEmpty()) {
            if (verbose) {
                System.out.println("‚ö†Ô∏è –ù–µ–º–∞—î –∫–≤–∞—Ä—Ç–∏—Ä –∑ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥—É");
            }
            return false;
        }
        
        // –ë–µ—Ä–µ–º–æ –¥–≤—ñ –Ω–∞–π–Ω–æ–≤—ñ—à—ñ –∫–≤–∞—Ä—Ç–∏—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤
        Apartment apartment1 = apartmentsWithPhotos.get(0);
        Apartment apartment2 = apartmentsWithPhotos.size() > 1 ? apartmentsWithPhotos.get(1) : null;
        
        if (verbose) {
            System.out.println("üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–≤–∞—Ä—Ç–∏—Ä—É " + apartment1.getId() + " –≤ –∫–∞–Ω–∞–ª 1");
            if (apartment2 != null) {
                System.out.println("üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–≤–∞—Ä—Ç–∏—Ä—É " + apartment2.getId() + " –≤ –∫–∞–Ω–∞–ª 2");
            }
        }
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ –∫–≤–∞—Ä—Ç–∏—Ä–∏ –≤ —Ä—ñ–∑–Ω—ñ –∫–∞–Ω–∞–ª–∏
        boolean success = telegramService.sendDifferentApartmentsToChannels(apartment1, apartment2);
        
        if (success) {
            // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∫–≤–∞—Ä—Ç–∏—Ä–∏ —è–∫ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ
            markAsPublished(apartment1);
            if (apartment2 != null) {
                markAsPublished(apartment2);
            }
            
            if (verbose) {
                System.out.println("‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ " + (apartment2 != null ? "2" : "1") + " –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è");
            }
        }
        
        return success;
    }
    
    /**
     * –ü–æ—Å—Ç–∏–Ω–≥ –∑ —Ä–∞–Ω–∫–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å (9:00)
     */
    public boolean postMorningApartments() {
        if (verbose) {
            System.out.println("üåÖ –ü–æ—á–∏–Ω–∞—î–º–æ –ø–æ—Å—Ç–∏–Ω–≥ —Ä–∞–Ω–∫–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å...");
        }
        
        // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –º—ñ—Å—Ç
        List<org.example.config.CityConfig.City> cities = org.example.config.CityConfig.getCities();
        List<Apartment> allApartments = new ArrayList<>();
        
        // –ó–±–∏—Ä–∞—î–º–æ –∫–≤–∞—Ä—Ç–∏—Ä–∏ –∑ —É—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å
        for (org.example.config.CityConfig.City city : cities) {
            List<Apartment> cityApartments = databaseManager.getUnpostedApartments(city.dbTable, 2);
            allApartments.addAll(cityApartments);
        }
        
        // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∞—Ç–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–Ω–∞–π–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
        allApartments.sort((a1, a2) -> {
            if (a1.getCreatedAt() == null && a2.getCreatedAt() == null) return 0;
            if (a1.getCreatedAt() == null) return 1;
            if (a2.getCreatedAt() == null) return -1;
            return a2.getCreatedAt().compareTo(a1.getCreatedAt());
        });
        
        // –ë–µ—Ä–µ–º–æ –ª–∏—à–µ 2 –Ω–∞–π–Ω–æ–≤—ñ—à–∏—Ö
        if (allApartments.size() > 2) {
            allApartments = allApartments.subList(0, 2);
        }
        
        return postSmart(allApartments);
    }
    
    /**
     * –†–æ–∑—É–º–Ω–∏–π –ø–æ—Å—Ç–∏–Ω–≥ –∑ –Ω–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≥–æ–¥–∏–Ω–∏ –∞–±–æ —Ä–∞–Ω–∫–æ–≤–∏—Ö
     */
    public boolean postHourlyApartments() {
        if (verbose) {
            System.out.println("‚è∞ –ü–æ—á–∏–Ω–∞—î–º–æ —â–æ–≥–æ–¥–∏–Ω–Ω–∏–π –ø–æ—Å—Ç–∏–Ω–≥...");
        }
        
        // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –º—ñ—Å—Ç
        List<org.example.config.CityConfig.City> cities = org.example.config.CityConfig.getCities();
        List<Apartment> recentApartments = new ArrayList<>();
        
        // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≥–æ–¥–∏–Ω–∏ –∑ —É—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å
        for (org.example.config.CityConfig.City city : cities) {
            List<Apartment> cityRecent = databaseManager.getUnpostedApartmentsFromLastHour(city.dbTable, 5);
            recentApartments.addAll(cityRecent);
        }
        
        if (recentApartments != null && !recentApartments.isEmpty()) {
            if (verbose) {
                System.out.println("üÜï –ó–Ω–∞–π–¥–µ–Ω–æ " + recentApartments.size() + " –Ω–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≥–æ–¥–∏–Ω–∏");
            }
            return postSmart(recentApartments);
        } else {
            // –Ø–∫—â–æ –Ω–æ–≤–∏—Ö –Ω–µ–º–∞—î, –±–µ—Ä–µ–º–æ –≤—Å—ñ –Ω–µ–æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ (–±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä–∞ –∑–∞ —á–∞—Å–æ–º)
            if (verbose) {
                System.out.println("üìÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—Å—ñ –Ω–µ–æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (–Ω–æ–≤–∏—Ö –Ω–µ–º–∞—î)");
            }
            return postMorningApartments();
        }
    }
    
    /**
     * –ü–æ–∑–Ω–∞—á–∞—î –∫–≤–∞—Ä—Ç–∏—Ä—É —è–∫ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—É
     */
    public void markAsPublished(Apartment apartment) {
        try {
            // –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤ —è–∫—ñ–π —Ç–∞–±–ª–∏—Ü—ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∫–≤–∞—Ä—Ç–∏—Ä–∞
            String tableName = determineTableName(apartment);
            databaseManager.markAsPosted(tableName, apartment.getId());
            if (verbose) {
                System.out.println("‚úÖ –ö–≤–∞—Ä—Ç–∏—Ä–∞ " + apartment.getId() + " –ø–æ–∑–Ω–∞—á–µ–Ω–∞ —è–∫ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ " + tableName);
            }
        } catch (Exception e) {
            System.err.println("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –∫–≤–∞—Ä—Ç–∏—Ä–∏ —è–∫ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ—ó: " + e.getMessage());
        }
    }
    
    /**
     * –í–∏–∑–Ω–∞—á–∞—î –≤ —è–∫—ñ–π —Ç–∞–±–ª–∏—Ü—ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∫–≤–∞—Ä—Ç–∏—Ä–∞
     */
    private String determineTableName(Apartment apartment) {
        // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –º—ñ—Å—Ç –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        List<org.example.config.CityConfig.City> cities = org.example.config.CityConfig.getCities();
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –∫–æ–∂–Ω—ñ–π —Ç–∞–±–ª–∏—Ü—ñ
        for (org.example.config.CityConfig.City city : cities) {
            Optional<Apartment> foundApartment = databaseManager.getApartmentById(city.dbTable, apartment.getId());
            if (foundApartment.isPresent()) {
                return city.dbTable;
            }
        }
        
        return "Apartments_Lviv";
    }
    
    public boolean testTelegramConnection() {
        return telegramService.testConnection();
    }
    
    public void publishPostsForCity(String tableName, int postsCount) {
        System.out.println("\n–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –ø–æ—Å—Ç—ñ–≤ –¥–ª—è " + tableName + "...");
        
        List<Apartment> unpostedApartments = databaseManager.getUnpostedApartments(tableName, postsCount);
        
        if (unpostedApartments.isEmpty()) {
            System.out.println("–ù–µ–º–∞—î –Ω–µ–æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä –¥–ª—è " + tableName);
            return;
        }
        
        int publishedCount = 0;
        
        for (Apartment apartment : unpostedApartments) {
            if (apartment.getPhotoPaths() == null || apartment.getPhotoPaths().isEmpty()) {
                if (verbose) {
                    System.out.println("–ö–≤–∞—Ä—Ç–∏—Ä–∞ " + apartment.getId() + " –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ");
                }
                continue;
            }
            
            boolean success = telegramService.sendToBothChannels(apartment);
            
            if (success) {
                databaseManager.markAsPosted(tableName, apartment.getId());
                publishedCount++;
                
                if (verbose) {
                    System.out.println("–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –∫–≤–∞—Ä—Ç–∏—Ä—É " + apartment.getId() + " –≤ " + tableName);
                }
                
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    break;
                }
            } else {
                System.err.println("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É " + apartment.getId());
            }
        }
        
        System.out.println("–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ " + publishedCount + " –∑ " + unpostedApartments.size() + " –∫–≤–∞—Ä—Ç–∏—Ä –¥–ª—è " + tableName);
    }
    
    public void publishPostsForAllCitiesWithSmartLogic(int postsPerCity) {
        System.out.println("–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –ø–æ—Å—Ç—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö –º—ñ—Å—Ç –∑ —Ä–æ–∑—É–º–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é...");
        
        List<org.example.config.CityConfig.City> cities = org.example.config.CityConfig.getCities();
        
        for (org.example.config.CityConfig.City city : cities) {
            publishPostsForCityWithSmartLogic(city.dbTable, postsPerCity);
        }
    }
    
    public void publishPostsForCityWithSmartLogic(String tableName, int postsCount) {
        System.out.println("\n–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –ø–æ—Å—Ç—ñ–≤ –¥–ª—è " + tableName + " –∑ —Ä–æ–∑—É–º–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é...");
        
        List<Apartment> newApartments = databaseManager.getUnpostedApartmentsFromLastHour(tableName, postsCount);
        
        if (!newApartments.isEmpty()) {
            System.out.println("–ó–Ω–∞–π–¥–µ–Ω–æ " + newApartments.size() + " –Ω–æ–≤–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä (–æ—Å—Ç–∞–Ω–Ω—è –≥–æ–¥–∏–Ω–∞)");
            publishApartmentsList(tableName, newApartments);
        } else {
            System.out.println("–ù–æ–≤–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä –Ω–µ–º–∞—î, –±–µ—Ä–µ–º–æ –≤—Å—ñ –Ω–µ–æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ");
            List<Apartment> allUnpostedApartments = databaseManager.getUnpostedApartments(tableName, postsCount);
            
            if (!allUnpostedApartments.isEmpty()) {
                publishApartmentsList(tableName, allUnpostedApartments);
            } else {
                System.out.println("–ù–µ–º–∞—î –Ω–µ–æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä –¥–ª—è " + tableName);
            }
        }
    }
    
    private void publishApartmentsList(String tableName, List<Apartment> apartments) {
        int publishedCount = 0;
        
        for (Apartment apartment : apartments) {
            if (apartment.getPhotoPaths() == null || apartment.getPhotoPaths().isEmpty()) {
                if (verbose) {
                    System.out.println("–ö–≤–∞—Ä—Ç–∏—Ä–∞ " + apartment.getId() + " –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ");
                }
                continue;
            }
            
            boolean success = telegramService.sendToBothChannels(apartment);
            
            if (success) {
                databaseManager.markAsPosted(tableName, apartment.getId());
                publishedCount++;
                
                if (verbose) {
                    System.out.println("–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –∫–≤–∞—Ä—Ç–∏—Ä—É " + apartment.getId() + " –≤ " + tableName);
                }
                
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    break;
                }
            } else {
                System.err.println("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É " + apartment.getId());
            }
        }
        
        System.out.println("–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ " + publishedCount + " –∑ " + apartments.size() + " –∫–≤–∞—Ä—Ç–∏—Ä –¥–ª—è " + tableName);
    }
    public void publishPostsForAllCities(int postsPerCity) {
        System.out.println("üåç –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –ø–æ—Å—Ç—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö –º—ñ—Å—Ç...");
        
        // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –º—ñ—Å—Ç
        List<org.example.config.CityConfig.City> cities = org.example.config.CityConfig.getCities();
        
        // –ü—É–±–ª—ñ–∫—É—î–º–æ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –º—ñ—Å—Ç–∞
        for (org.example.config.CityConfig.City city : cities) {
            publishPostsForCity(city.dbTable, postsPerCity);
        }
    }
    
    /**
     * –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º—ñ—Å—Ç–∞—Ö
     */
    public void printStatistics() {
        System.out.println("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º—ñ—Å—Ç–∞—Ö:");
        
        // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –º—ñ—Å—Ç
        List<org.example.config.CityConfig.City> cities = org.example.config.CityConfig.getCities();
        
        for (org.example.config.CityConfig.City city : cities) {
            List<Apartment> cityApartments = databaseManager.getUnpostedApartments(city.dbTable, 1000);
            System.out.println("üèô " + city.name + ": " + cityApartments.size() + " –Ω–µ–æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä");
            
            if (!cityApartments.isEmpty()) {
                Apartment newest = cityApartments.get(0);
                System.out.println("   –ù–∞–π–Ω–æ–≤—ñ—à–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞: " + newest.getId() + " (" + 
                                  formatDate(newest.getCreatedAt()) + ")");
            }
        }
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç—É—î –¥–∞—Ç—É –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è
     */
    private String formatDate(LocalDateTime dateTime) {
        if (dateTime == null) return "–ù–µ –≤–∫–∞–∑–∞–Ω–æ";
        
        java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("dd.MM HH:mm");
        return dateTime.format(formatter);
    }

    /**
     * –ü–æ—Å—Ç–∏–Ω–≥ –∑ —Ä–∞–Ω–∫–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è –æ–¥–Ω–æ–≥–æ –º—ñ—Å—Ç–∞ (9:00)
     */
    public boolean postMorningApartmentsForCity(String tableName, String channel1, String channel2) {
        if (verbose) {
            System.out.println("üåÖ –ü–æ—á–∏–Ω–∞—î–º–æ –ø–æ—Å—Ç–∏–Ω–≥ —Ä–∞–Ω–∫–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ: " + tableName);
        }
        
        // –ë–µ—Ä–µ–º–æ –ª–∏—à–µ 2 –Ω–∞–π–Ω–æ–≤—ñ—à–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä–∏
        List<Apartment> apartments = databaseManager.getUnpostedApartments(tableName, 2);
        
        if (apartments.isEmpty()) {
            return false;
        }
        
        apartments.sort((a1, a2) -> {
            if (a1.getCreatedAt() == null && a2.getCreatedAt() == null) return 0;
            if (a1.getCreatedAt() == null) return 1;
            if (a2.getCreatedAt() == null) return -1;
            return a2.getCreatedAt().compareTo(a1.getCreatedAt());
        });
        Apartment apt1 = apartments.size() > 0 ? apartments.get(0) : null;
        Apartment apt2 = apartments.size() > 1 ? apartments.get(1) : null;
        
        // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å
        if (channel1 == null || channel1.isEmpty() || channel2 == null || channel2.isEmpty()) {
            logWarning("[WARN] –î–ª—è —Ç–∞–±–ª–∏—Ü—ñ " + tableName + " –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –æ–±–∏–¥–≤–∞ –∫–∞–Ω–∞–ª–∏. –ö–∞–Ω–∞–ª1: '" + channel1 + "', –ö–∞–Ω–∞–ª2: '" + channel2 + "'");
        }
        
        boolean success = false;
        if (apt1 != null) success |= telegramService.sendApartmentPost(apt1, channel1);
        if (apt2 != null) success |= telegramService.sendApartmentPost(apt2, channel2);
        
        if (success) {
            if (apt1 != null) markAsPublished(apt1);
            if (apt2 != null) markAsPublished(apt2);
        }
        return success;
    }

    /**
     * –ü–æ—Å—Ç–∏–Ω–≥ –¥–ª—è –≤—Å—ñ—Ö –º—ñ—Å—Ç (—Ä–∞–Ω–∫–æ–≤–∏–π)
     */
    public void postMorningApartmentsForAllCities(List<org.example.config.CityConfig.City> cities) {
        for (org.example.config.CityConfig.City city : cities) {
            postMorningApartmentsForCity(city.dbTable, city.channel1, city.channel2);
        }
    }

    /**
     * –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å —É —Ñ–∞–π–ª warnings.log
     */
    public void logWarning(String message) {
        System.out.println(message);
        try (java.io.FileWriter fw = new java.io.FileWriter("warnings.log", true)) {
            fw.write(java.time.LocalDateTime.now() + " " + message + "\n");
        } catch (Exception e) {
            System.err.println("[LOG] –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–∏—Å–∞—Ç–∏ —É warnings.log: " + e.getMessage());
        }
    }
} 